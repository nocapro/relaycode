uuid: a3004085-f3c7-4581-9b19-5d6cfcf8d650
projectId: relaycode
createdAt: '2025-09-04T03:21:21.817Z'
linesAdded: 24
linesRemoved: 45
gitCommitMsg: 'refactor(core): radically DRY transaction processing logic'
promptSummary: >-
  Refactor the codebase to be more DRY (Don't Repeat Yourself), reduce redundant
  code, and improve code structure without causing regressions.
reasoning:
  - >-
    yo fam, let's get this codebase looking sharp. goin' on a DRY-spell to clean
    up this redundancy. less code, more power. leggo.
  - >-
    First up, I'm hitting `src/core/transaction.ts`. This file's got some logic
    that's kinda repeating what's in `relaycode-core`. We're gonna centralize
    that state management logic in the core package and just call it from the
    transaction handler. This means `applyOperations` will be way cleaner—it'll
    just handle the filesystem side of things, letting the core package be the
    single source of truth for in-memory state changes.
  - >-
    Also, there's a little wrapper function in there, `calculateLineChanges`,
    that just calls another function. That's just extra code for no reason, so
    I'm yeeting it and calling the core function directly in `processPatch`.
  - >-
    Finally, the way we handle `--yes` for prompts can be slicker. Some commands
    use a cool `createConfirmationHandler` helper, but `processPatch` was doing
    its own thing. I'm refactoring it to use the handler so all our confirmation
    logic is consistent and DRY.
  - Peep the changes.
operations:
  - type: write
    path: src/core/transaction.ts
    content: >-
      --- src/core/transaction.ts

      +++ src/core/transaction.ts

      @@ -5,8 +5,8 @@
       import chalk from 'chalk';
       import { applyOperations as applyOperationsCore, calculateLineChanges as calculateLineChangesCore } from 'relaycode-core';
       
      -import { hasBeenProcessed, writePendingState, commitState,
      deletePendingState, updatePendingState } from './state';

      -import { getConfirmation } from '../utils/prompt';

      +import { commitState, deletePendingState, hasBeenProcessed,
      updatePendingState, writePendingState } from './state';

      +import { createConfirmationHandler } from '../utils/prompt';
       import { requestApprovalWithNotification, notifyFailure, notifySuccess, notifyPatchDetected, notifyRollbackFailure } from '../utils/notifier';
       
       type Prompter = (question: string) => Promise<boolean>;
      @@ -34,44 +34,36 @@
        * @param cwd The working directory.
        * @returns A map representing the final state of all affected files.
        */
      -export const applyOperations = async (

      +export const applyOperations = async (  
         operations: FileOperation[],
         originalFiles: Map<string, string | null>,
         cwd: string = process.cwd()
       ): Promise<Map<string, string | null>> => {
      -  // This map tracks the evolving in--memory state of files as we apply
      operations.
         const fileStates = new Map<string, string | null>(originalFiles);
       
         for (const op of operations) {
      -    if (op.type === 'delete') {

      -      if (!fileStates.has(op.path) || fileStates.get(op.path) === null) {

      -        throw new Error(`Attempted to delete a file that does not exist
      or was already deleted: ${op.path}`);

      -      }

      +    // First, calculate the next state in memory using the core function.

      +    const singleOpResult = await applyOperationsCore([op], fileStates);

      +    if (!singleOpResult.success) {

      +      const opPath = op.type === 'rename' ? op.from : op.path;

      +      throw new Error(`Failed to calculate state change for operation on
      '${opPath}': ${singleOpResult.error}`);

      +    }

      +

      +    // Then, apply the corresponding physical change to the filesystem.

      +    if (op.type === 'delete') {
             await deleteFile(op.path, cwd);
      -      fileStates.set(op.path, null);
           } else if (op.type === 'rename') {
             await renameFile(op.from, op.to, cwd);
      -      const content = fileStates.get(op.from);

      -      fileStates.set(op.from, null);

      -      if (content !== undefined) {

      -        fileStates.set(op.to, content);

      -      }
           } else if (op.type === 'write') {
      -      // For a write operation (which could be a patch), we apply it to
      the current in-memory state.

      -      const singleOpResult = await applyOperationsCore([op], fileStates);

      -      if (!singleOpResult.success) {

      -        throw new Error(`Failed applying single write op to ${op.path}:
      ${singleOpResult.error}`);

      -      }

      -      
             const newContent = singleOpResult.newFileStates.get(op.path);
             if (typeof newContent === 'string') {
               await writeFileContent(op.path, newContent, cwd);
      -        fileStates.set(op.path, newContent);
             }
           }
      +    

      +    // Finally, update the in-memory state for the next iteration.

      +    singleOpResult.newFileStates.forEach((content, path) => {

      +      fileStates.set(path, content);

      +    });
         }
         return fileStates;
       };
      @@ -118,17 +110,6 @@
           throw new Error(`Rollback failed for ${restoreErrors.length} file(s):\n${errorSummary}`);
         }
       };
      -

      -const calculateLineChanges = (

      -    op: FileOperation,

      -    originalFiles: Map<string, string | null>,

      -    newFiles: Map<string, string | null>

      -): { added: number; removed: number; difference: number } => {

      -    // Simply delegate to the core function.

      -    // The core function's signature is slightly different, but it serves
      the same purpose.

      -    return calculateLineChangesCore(op, originalFiles, newFiles);

      -};
       
       const logCompletionSummary = (
           uuid: string,
      @@ -172,13 +153,11 @@
       type ApprovalOptions = {
           config: Config;
           cwd: string;
      -    prompter: Prompter;

      -    skipConfirmation: boolean;

      +    getConfirmation: Prompter;
       }
       
      -const handleApproval = async ({ config, cwd, prompter, skipConfirmation
      }: ApprovalOptions): Promise<boolean> => {

      +const handleApproval = async ({ config, cwd, getConfirmation }:
      ApprovalOptions): Promise<boolean> => {
           const finalErrorCount = await getErrorCount(config.patch.linter, cwd);
           logger.log(`  - Final linter error count: ${finalErrorCount > 0 ? chalk.red(finalErrorCount) : chalk.green(finalErrorCount)}`);
           
      @@ -201,15 +180,10 @@
                   logger.info('Notification timed out or was dismissed. Please use the terminal to respond.');
               }
       
      -        return await prompter('Changes applied. Do you want to approve
      and commit them? (y/N)');

      +        return await getConfirmation('Changes applied. Do you want to
      approve and commit them? (y/N)');
           };
       
      -    if (skipConfirmation) {

      -        logger.success('  - Changes approved via -y/--yes flag.');

      -        return true;

      -    }
           if (config.patch.approvalMode === 'manual') {
      -        return await getManualApproval('Manual approval required because
      "approvalMode" is set to "manual".');

      +        return await getManualApproval('Manual approval mode is
      enabled.');
           }
           // auto mode
           const canAutoApprove = finalErrorCount <= config.patch.approvalOnErrorCount;
      @@ -221,9 +195,7 @@
       
       export const processPatch = async (config: Config, parsedResponse: ParsedLLMResponse, options?: ProcessPatchOptions): Promise<void> => {
           const cwd = options?.cwd || process.cwd();
      -    const prompter = options?.prompter || getConfirmation;

      -    const skipConfirmation = options?.yes === true;

      -    const notifyOnStart = options?.notifyOnStart ?? false;

      +    const getConfirmation = createConfirmationHandler({ yes: options?.yes
      }, options?.prompter);
           const { control, operations, reasoning } = parsedResponse;
           const { uuid, projectId } = control;
           const startTime = performance.now();
      @@ -249,7 +221,7 @@
           }
       
           // Notify if coming from watch mode, now that we know it's a new patch.
      -    if (notifyOnStart) {

      +    if (options?.notifyOnStart) {
               notifyPatchDetected(config.projectId, config.core.enableNotifications);
               logger.success(`Valid patch detected for project '${chalk.cyan(config.projectId)}'. Processing...`);
           }
      @@ -298,7 +270,7 @@
               logger.success('  - File operations complete.');
       
               const opStats = operations.map(op => {
      -            const stats = calculateLineChanges(op, originalFiles,
      newFileStates);

      +            const stats = calculateLineChangesCore(op, originalFiles,
      newFileStates);
                   if (op.type === 'write') {
                       logger.success(`✔ Written: ${chalk.cyan(op.path)} (${chalk.green(`+${stats.added}`)}, ${chalk.red(`-${stats.removed}`)})`);
                   } else if (op.type === 'delete') {
      @@ -328,7 +300,7 @@
               logger.success(`Lines changed: ${chalk.green(`+${totalAdded}`)}, ${chalk.red(`-${totalRemoved}`)} (${chalk.yellow(`${totalDifference} total`)})`);
               logger.log(`Checks completed in ${chalk.gray(`${checksDuration.toFixed(2)}ms`)}`);
       
      -        const isApproved = await handleApproval({ config, cwd, prompter,
      skipConfirmation });

      +        const isApproved = await handleApproval({ config, cwd,
      getConfirmation });
       
               if (isApproved) {
                   stateFile.approved = true;
    patchStrategy: new-unified
snapshot:
  src/core/transaction.ts: >
    import { Config, ParsedLLMResponse, StateFile, FileSnapshot, FileOperation }
    from 'relaycode-core';

    import { logger, getErrorMessage } from '../utils/logger';

    import { getErrorCount, executeShellCommand } from '../utils/shell';

    import { deleteFile, readFileContent, removeEmptyParentDirectories,
    renameFile, writeFileContent } from '../utils/fs';

    import path from 'path';

    import chalk from 'chalk';

    import { applyOperations as applyOperationsCore, calculateLineChanges as
    calculateLineChangesCore } from 'relaycode-core';


    import { hasBeenProcessed, writePendingState, commitState,
    deletePendingState, updatePendingState } from './state';

    import { getConfirmation } from '../utils/prompt';

    import { requestApprovalWithNotification, notifyFailure, notifySuccess,
    notifyPatchDetected, notifyRollbackFailure } from '../utils/notifier';


    type Prompter = (question: string) => Promise<boolean>;


    type ProcessPatchOptions = {
        prompter?: Prompter;
        cwd?: string;
        notifyOnStart?: boolean;
        yes?: boolean;
    };


    export const createSnapshot = async (filePaths: string[], cwd: string =
    process.cwd()): Promise<FileSnapshot> => {
      const snapshot: FileSnapshot = {};
      await Promise.all(
        filePaths.map(async (filePath) => {
          snapshot[filePath] = await readFileContent(filePath, cwd);
        })
      );
      return snapshot;
    };


    /**
     * Applies a series of file operations to the filesystem and returns the new in-memory file states.
     * This function processes operations sequentially, applying patches (like diffs) against the evolving
     * state of files, and performing filesystem actions (write, delete, rename) along the way.
     * @param operations The file operations to apply.
     * @param originalFiles The initial state of the files.
     * @param cwd The working directory.
     * @returns A map representing the final state of all affected files.
     */
    export const applyOperations = async (
      operations: FileOperation[],
      originalFiles: Map<string, string | null>,
      cwd: string = process.cwd()
    ): Promise<Map<string, string | null>> => {
      // This map tracks the evolving in--memory state of files as we apply operations.
      const fileStates = new Map<string, string | null>(originalFiles);

      for (const op of operations) {
        if (op.type === 'delete') {
          if (!fileStates.has(op.path) || fileStates.get(op.path) === null) {
            throw new Error(`Attempted to delete a file that does not exist or was already deleted: ${op.path}`);
          }
          await deleteFile(op.path, cwd);
          fileStates.set(op.path, null);
        } else if (op.type === 'rename') {
          await renameFile(op.from, op.to, cwd);
          const content = fileStates.get(op.from);
          fileStates.set(op.from, null);
          if (content !== undefined) {
            fileStates.set(op.to, content);
          }
        } else if (op.type === 'write') {
          // For a write operation (which could be a patch), we apply it to the current in-memory state.
          const singleOpResult = await applyOperationsCore([op], fileStates);
          if (!singleOpResult.success) {
            throw new Error(`Failed applying single write op to ${op.path}: ${singleOpResult.error}`);
          }
          
          const newContent = singleOpResult.newFileStates.get(op.path);
          if (typeof newContent === 'string') {
            await writeFileContent(op.path, newContent, cwd);
            fileStates.set(op.path, newContent);
          }
        }
      }
      return fileStates;
    };


    export const restoreSnapshot = async (snapshot: FileSnapshot, cwd: string =
    process.cwd()): Promise<void> => {
      const projectRoot = path.resolve(cwd);
      const entries = Object.entries(snapshot);
      const directoriesToClean = new Set<string>();
      const restoreErrors: { path: string, error: unknown }[] = [];

      // Attempt to restore all files in parallel, collecting errors.
      await Promise.all(entries.map(async ([filePath, content]) => {
          const fullPath = path.resolve(cwd, filePath);
          try {
            if (content === null) {
              // If the file didn't exist in the snapshot, make sure it doesn't exist after restore.
              await deleteFile(filePath, cwd);
              directoriesToClean.add(path.dirname(fullPath));
            } else {
              // Create directory structure if needed and write the original content back.
              await writeFileContent(filePath, content, cwd);
            }
          } catch (error) {
            restoreErrors.push({ path: filePath, error });
          }
      }));
      
      // After all files are processed, clean up empty directories
      // Sort directories by depth (deepest first) to clean up nested empty dirs properly
      const sortedDirs = Array.from(directoriesToClean)
        .sort((a, b) => b.split(path.sep).length - a.split(path.sep).length);
      
      // Process each directory that had files deleted
      for (const dir of sortedDirs) {
        await removeEmptyParentDirectories(dir, projectRoot);
      }

      if (restoreErrors.length > 0) {
        const errorSummary = restoreErrors
          .map(e => `  - ${e.path}: ${getErrorMessage(e.error)}`)
          .join('\n');
        throw new Error(`Rollback failed for ${restoreErrors.length} file(s):\n${errorSummary}`);
      }
    };


    const calculateLineChanges = (
        op: FileOperation,
        originalFiles: Map<string, string | null>,
        newFiles: Map<string, string | null>
    ): { added: number; removed: number; difference: number } => {
        // Simply delegate to the core function.
        // The core function's signature is slightly different, but it serves the same purpose.
        return calculateLineChangesCore(op, originalFiles, newFiles);
    };


    const logCompletionSummary = (
        uuid: string,
        startTime: number,
        operations: FileOperation[]
    ) => {
        const duration = performance.now() - startTime;

        logger.log(chalk.bold('\nSummary:'));
        logger.log(`Applied ${chalk.cyan(operations.length)} file operation(s) successfully.`);
        logger.log(`Total time from start to commit: ${chalk.gray(`${duration.toFixed(2)}ms`)}`);
        logger.success(`✅ Transaction ${chalk.gray(uuid)} committed successfully!`);
    };


    const rollbackTransaction = async (cwd: string, uuid: string, snapshot:
    FileSnapshot, reason: string, enableNotifications: boolean = true, isError:
    boolean = true): Promise<void> => {
        if (isError) {
            logger.warn(`Rolling back changes: ${reason}`);
        }

        let rollbackSuccessful = false;
        try {
            await restoreSnapshot(snapshot, cwd);
            logger.success('  - Files restored to original state.');
            rollbackSuccessful = true;
        } catch (error) {
            logger.error(`Fatal: Rollback failed: ${getErrorMessage(error)}`);
            notifyRollbackFailure(uuid, enableNotifications);
            // Do not rethrow; we're already in a final error handling state.
        } finally {
            try {
                await deletePendingState(cwd, uuid);
                logger.info(`↩️ Transaction ${chalk.gray(uuid)} rolled back.`);
                if (isError && rollbackSuccessful) {
                    notifyFailure(uuid, enableNotifications);
                }
            } catch (cleanupError) {
                logger.error(`Fatal: Could not clean up pending state for ${chalk.gray(uuid)}: ${getErrorMessage(cleanupError)}`);
            }
        }
    };


    type ApprovalOptions = {
        config: Config;
        cwd: string;
        prompter: Prompter;
        skipConfirmation: boolean;
    }


    const handleApproval = async ({ config, cwd, prompter, skipConfirmation }:
    ApprovalOptions): Promise<boolean> => {
        const finalErrorCount = await getErrorCount(config.patch.linter, cwd);
        logger.log(`  - Final linter error count: ${finalErrorCount > 0 ? chalk.red(finalErrorCount) : chalk.green(finalErrorCount)}`);
        
        const getManualApproval = async (reason: string): Promise<boolean> => {
            logger.warn(reason);
            
            const notificationResult = await requestApprovalWithNotification(config.projectId, config.core.enableNotifications);

            if (notificationResult === 'approved') {
                logger.info('Approved via notification.');
                return true;
            }
            if (notificationResult === 'rejected') {
                logger.info('Rejected via notification.');
                return false;
            }

            if (notificationResult === 'timeout') {
                logger.info('Notification timed out or was dismissed. Please use the terminal to respond.');
            }

            return await prompter('Changes applied. Do you want to approve and commit them? (y/N)');
        };

        if (skipConfirmation) {
            logger.success('  - Changes approved via -y/--yes flag.');
            return true;
        }
        if (config.patch.approvalMode === 'manual') {
            return await getManualApproval('Manual approval required because "approvalMode" is set to "manual".');
        }
        // auto mode
        const canAutoApprove = finalErrorCount <= config.patch.approvalOnErrorCount;
        if (canAutoApprove) {
            logger.success('  - Changes automatically approved based on your configuration.');
            return true;
        }
        return await getManualApproval(`Manual approval required: Linter found ${finalErrorCount} error(s) (threshold is ${config.patch.approvalOnErrorCount}).`);
    };


    export const processPatch = async (config: Config, parsedResponse:
    ParsedLLMResponse, options?: ProcessPatchOptions): Promise<void> => {
        const cwd = options?.cwd || process.cwd();
        const prompter = options?.prompter || getConfirmation;
        const skipConfirmation = options?.yes === true;
        const notifyOnStart = options?.notifyOnStart ?? false;
        const { control, operations, reasoning } = parsedResponse;
        const { uuid, projectId } = control;
        const startTime = performance.now();

        // 1. Validation
        if (projectId !== config.projectId) {
            logger.warn(`Skipping patch: projectId mismatch (expected '${chalk.cyan(config.projectId)}', got '${chalk.cyan(projectId)}').`);
            return;
        }
        if (await hasBeenProcessed(cwd, uuid)) {
            logger.info(`Skipping patch: uuid '${chalk.gray(uuid)}' has already been processed.`);
            return;
        }

        const { minFileChanges, maxFileChanges } = config.patch;
        const operationCount = operations.length;
        if (minFileChanges > 0 && operationCount < minFileChanges) {
            logger.warn(`Skipping patch: Not enough file changes (expected at least ${minFileChanges}, got ${operationCount}).`);
            return;
        }
        if (maxFileChanges && operationCount > maxFileChanges) {
            logger.warn(`Skipping patch: Too many file changes (expected at most ${maxFileChanges}, got ${operationCount}).`);
            return;
        }

        // Notify if coming from watch mode, now that we know it's a new patch.
        if (notifyOnStart) {
            notifyPatchDetected(config.projectId, config.core.enableNotifications);
            logger.success(`Valid patch detected for project '${chalk.cyan(config.projectId)}'. Processing...`);
        }

        // 2. Pre-flight checks
        if (config.patch.preCommand) {
            logger.log(`  - Running pre-command: ${chalk.magenta(config.patch.preCommand)}`);
            const { exitCode, stderr } = await executeShellCommand(config.patch.preCommand, cwd);
            if (exitCode !== 0) {
                logger.error(`Pre-command failed with exit code ${chalk.red(exitCode)}, aborting transaction.`);
                if (stderr) logger.error(`Stderr: ${stderr}`);
                return;
            }
        }

        logger.info(`🚀 Starting transaction for patch ${chalk.gray(uuid)}...`);
        logger.log(`${chalk.bold('Reasoning:')}\n  ${reasoning.join('\n  ')}`);

        const affectedFilePaths = operations.reduce<string[]>((acc, op) => {
            if (op.type === 'rename') {
                acc.push(op.from, op.to);
            } else {
                acc.push(op.path);
            }
            return acc;
        }, []);
        const snapshot = await createSnapshot(affectedFilePaths, cwd);
        
        const stateFile: StateFile = {
            uuid,
            projectId,
            createdAt: new Date().toISOString(),
            gitCommitMsg: control.gitCommitMsg,
            promptSummary: control.promptSummary,
            reasoning,
            operations,
            snapshot,
            approved: false,
        };

        try {
            await writePendingState(cwd, stateFile);
            logger.success('  - Staged changes to .pending.yml file.');

            const originalFiles = new Map<string, string | null>();
            affectedFilePaths.forEach(p => originalFiles.set(p, snapshot[p] ?? null));

            // Apply changes
            logger.log('  - Applying file operations...');
            const newFileStates = await applyOperations(operations, originalFiles, cwd);
            logger.success('  - File operations complete.');

            const opStats = operations.map(op => {
                const stats = calculateLineChanges(op, originalFiles, newFileStates);
                if (op.type === 'write') {
                    logger.success(`✔ Written: ${chalk.cyan(op.path)} (${chalk.green(`+${stats.added}`)}, ${chalk.red(`-${stats.removed}`)})`);
                } else if (op.type === 'delete') {
                    logger.success(`✔ Deleted: ${chalk.cyan(op.path)}`);
                } else if (op.type === 'rename') {
                    logger.success(`✔ Renamed: ${chalk.cyan(op.from)} -> ${chalk.cyan(op.to)}`);
                }
                return stats;
            });

            // Run post-command
            if (config.patch.postCommand) {
                logger.log(`  - Running post-command: ${chalk.magenta(config.patch.postCommand)}`);
                const postResult = await executeShellCommand(config.patch.postCommand, cwd);
                if (postResult.exitCode !== 0) {
                    logger.error(`Post-command failed with exit code ${chalk.red(postResult.exitCode)}.`);
                    if (postResult.stderr) logger.error(`Stderr: ${postResult.stderr}`);
                    throw new Error('Post-command failed, forcing rollback.');
                }
            }

            // Log summary before asking for approval
            const checksDuration = performance.now() - startTime;
            const totalAdded = opStats.reduce((sum, s) => sum + s.added, 0);
            const totalRemoved = opStats.reduce((sum, s) => sum + s.removed, 0);
            const totalDifference = opStats.reduce((sum, s) => sum + s.difference, 0);

            logger.log(chalk.bold('\nPre-flight summary:'));
            logger.success(`Lines changed: ${chalk.green(`+${totalAdded}`)}, ${chalk.red(`-${totalRemoved}`)} (${chalk.yellow(`${totalDifference} total`)})`);
            logger.log(`Checks completed in ${chalk.gray(`${checksDuration.toFixed(2)}ms`)}`);

            const isApproved = await handleApproval({ config, cwd, prompter, skipConfirmation });

            if (isApproved) {
                stateFile.approved = true;
                stateFile.linesAdded = totalAdded;
                stateFile.linesRemoved = totalRemoved;
                stateFile.linesDifference = totalDifference;
                await updatePendingState(cwd, stateFile); // Update state with approval and stats before commit
                await commitState(cwd, uuid);
                logCompletionSummary(uuid, startTime, operations);
                notifySuccess(uuid, config.core.enableNotifications);
                await handleAutoGitBranch(config, stateFile, cwd);
            } else {
                logger.warn('Operation cancelled by user. Rolling back changes...');
                await rollbackTransaction(cwd, uuid, snapshot, 'User cancellation', config.core.enableNotifications, false);
            }
        } catch (error) {
            const reason = getErrorMessage(error);
            await rollbackTransaction(cwd, uuid, snapshot, reason, config.core.enableNotifications, true);
        }
    };


    const handleAutoGitBranch = async (config: Config, stateFile: StateFile,
    cwd: string): Promise<void> => {
        if (!config.git.autoGitBranch) return;

        let branchNameSegment = '';
        if (config.git.gitBranchTemplate === 'gitCommitMsg' && stateFile.gitCommitMsg) {
            branchNameSegment = stateFile.gitCommitMsg;
        } else {
            branchNameSegment = stateFile.uuid;
        }

        const sanitizedSegment = branchNameSegment
            .trim()
            .toLowerCase()
            .replace(/[^\w\s-]/g, '') // Remove all non-word, non-space, non-hyphen chars
            .replace(/[\s_]+/g, '-') // Replace spaces and underscores with a single hyphen
            .replace(/-+/g, '-') // Collapse consecutive hyphens
            .replace(/^-|-$/g, '') // Trim leading/trailing hyphens
            .slice(0, 70); // Truncate

        if (sanitizedSegment) {
            const branchName = `${config.git.gitBranchPrefix}${sanitizedSegment}`;
            logger.info(`Creating and switching to new git branch: ${chalk.magenta(branchName)}`);
            const command = `git checkout -b "${branchName}"`;
            const result = await executeShellCommand(command, cwd);
            if (result.exitCode === 0) {
                logger.success(`Successfully created and switched to branch '${chalk.magenta(branchName)}'.`);
            } else {
                // Exit code 128 from `git checkout -b` often means the branch already exists.
                if (result.exitCode === 128 && result.stderr.includes('already exists')) {
                    logger.warn(`Could not create branch '${chalk.magenta(branchName)}' because it already exists.`);
                } else {
                    logger.warn(`Could not create git branch '${chalk.magenta(branchName)}'.`);
                }
                logger.debug(`'${command}' failed with: ${result.stderr}`);
            }
        } else {
            logger.warn('Could not generate a branch name segment from commit message or UUID. Skipping git branch creation.');
        }
    };
approved: true
